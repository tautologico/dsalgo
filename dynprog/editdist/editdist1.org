#+TITLE: Edit Distance

* Introduction

This problem was taken from an assigment (Problem 7-1 in Problem Set 7) in the 
Fall 2005 instance of MIT's "Introduction to Algorithms" course, based on the 
homonimous book by Cormen, Leiserson, Rivest and Shamir. 
See http://bit.ly/bN7vUR.

The 3rd edition of the book contains a similar problem, but with a somewhat 
different problem statement, as Exercise 15-5, Chapter 15 (Dynamic 
Programming). 


* The Problem

The edit distance $d(x, y)$ from a string x of length m to a string y of length n 
is the cost of a sequence of transformations applied to x so that it 
becomes y. Let z (of length s) be the intermediate form of the string, 
so that it starts equal to x (with s = m) and ends equal to y 
(with s = n); changing the value of s grows or shrinks the string z. 
Let i be the current index in z where the transformations 
can be applied (the "cursor"). For this problem, the set of transformations, 
with their associated costs and descriptions, is:

| Operation | Cost | Specification                  |
|-----------+------+--------------------------------|
| left      |    0 | i--                            |
| right     |    0 | i++                            |
| replace   |    4 | z[i]:=y[i]; i++                |
| delete    |    2 | z[i..s]:=z[i+1..s]; s--        |
| insert    |    3 | s++; z[i+1..s]:=z[i..s-1]; i++ |


Where z[i..s] is a range from z[i] to z[s] (assuming indexing starting at 
1). 


** Example

An example is the transformation from "algorithm" to "analysis", with 
corresponding solution, as given in the original problem statement. 


* Recursive Solution

The first important fact for the solution is that it's never strictly 
necessary to use the left operation. For each solution using left, it 
is always possible to obtain a solution with the same cost that does not 
use the operation. The idea is that if you're going back to change something 
in the string, you could have made the change before getting to the current 
location. Two operations (insert and replace) move the cursor to the right, 
none of them move the cursor to the left. So it is possible to do all the 
transformations in a single scan from left to right, never going back. 

This allows us to divide the problem nicely. First we generalize the problem: 
the edit distance $d(x, y)$ is equal to $d'(z, 0, s, y, 0, n)$, where z[1..s] 
starts as equal to x[1..m] (so s=m). d'(z, i, s, y, j, n) calculates the 
edit distance to transform z[i..s] into y[j..n]. As it is never necessary to 
backtrack in the string, this function depends only on the value of itself 
on the suffixes of z and y, that is, $d'(z, i, s, y, j, n)$ depends on the 
values of $d'$ for indices i+1 and j+1. In this case, i and j always increase 
in lockstep, but s may change. So $d'$ also depends on a varying s. 

The second crucial observation is that we don't need to build the string z, 
as we already know what the end result will be (y). Instead, each operation 
can be described by what suffix of x and/or y remains after it. For example, 
the right operation means that we matched the current character of x with 
the current character of y, and so we just need to get the edit distance 
of the suffixes of x and y after the current char of each. We can then have 
a function $d''(x, i, y, j)$ that calculates the edit distance from x[i..m] 
to y[j..n], where the intermediate form z is implicit. Then, 
$d(x, y) = d''(x, 0, y, 0)$ and the value of $d''$ for i and j depends on 
suffixes according to the operation:

| Operation | $d''(x, i, y, j)$ depends on |
|-----------+------------------------------|
| right     | $d''(x, i+1, y, j+1)$        |
| replace   | $d''(x, i+1, y, j+1)$        |
| delete    | $d''(x, i+1, y, j)$          |
| insert    | $d''(x, i, y, j+1)$          |

The replace operation means we substitute the current character in z (from x[i])
by the current character in y (y[j]), so we must advance both i and j. Deleting
is like skipping x[i] (because it is the initial value of z[i], which is 
deleted), so we just need to advance i. For insertion, we use y[j] but keep all 
available characters in x, so we just increment j. Of course, if i > m, this 
means we don't have any more of the original characters from x in z, so the 
only operation we can do is insertion from y; likewise, if j > n we don't have 
any more characters from y to insert, so the only possibility is to delete 
from x. 

Now, to get at the value of the edit distance, we just need to take the costs 
of transformations into consideration. Let $d_{right} = d''(x, i, y, j+1)$, 
$d_{down} = d''(x, i+1, y, j)$ and $d_{dr} = d''(x, i+1, y, j+1)$. Then, the 
recursive equation for $d''(x, i, y, j)$ is

\begin{equation} \label{eq:editdistrec}
d''(x, i, y, j) = 
  \left\{
  \begin{array}{cr}
     0,                       &  i > m \wedge j > n \\
     3 + d_{right},   &  i > m \wedge j \leq n \\
     2 + d_{down},   &  i \leq m \wedge j > n \\
     d_{dr},     &  x[i] = y[j] \\ 
     min(4 + d_{dr}, 3 + d_{right}, 2 + d_{down}), & \mathrm{otherwise}
  \end{array}
  \right.
\end{equation}


* Dynamic Programming

It is possible to obtain the edit distance by dynamic programming. The recursive
solution is clearly wasteful because the subproblems overlap. A bottom-up, 
table-driven dynamic programming solution is easy if we use a matrix of $m+1$ 
rows and $n+1$ columns where each $a_{i,j}$ is equal to the edit distance 
$d''(x, i, y, j)$. We calculate this matrix by starting with $a_{m+1,n+1}$, 
which is 0, according to equation \ref{eq:editdistrec}, and then proceed 
calculating bottom-up, right to left. The last row and last column of the 
matrix correspond to situations where $i>m$ and $j>n$, respectively, in the 
equation above, and are thus easy to calculate. 

For example, if x="alma" and y="mater", we would have

|   |  m |  a | t | e | r |   |
|---+----+----+---+---+---+---|
| a |    |    |   |   |   | 8 |
| l |    |    |   |   |   | 6 |
| m |    |    |   |   |   | 4 |
| a |    |    |   |   |   | 2 |
|   | 15 | 12 | 9 | 6 | 3 | 0 | 

Then we can loop starting with $i=m$ and $j=n$ and decreasing both until 1. 
For each $a_{i,j}$, its value will be:
\begin{equation}
a_{i,j} = 
  \left\{
  \begin{array}{cr}
    a_{i+1,j+1},          &   x[i] = y[j] \\
    min(4 + a_{i+1,j+1}, 
        3 + a_{i,j+1}, 
        2 + a_{i+1,j})    & \mathrm{otherwise}
  \end{array}
  \right.
\end{equation}

Finally, the value of the edit distance $d(x, y)$ will be $a_{0,0}$.
